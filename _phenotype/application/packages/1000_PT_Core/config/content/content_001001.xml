<?xml version="1.0" encoding="ISO-8859-1" ?>
<phenotype>
	<meta>
		<ptversion>##!PT_VERSION!##</ptversion>
		<ptsubversion>##!BUILD_NO!##</ptsubversion>
		<con_id>1001</con_id>
		<con_bez>Expandierende Liste</con_bez>		
		<con_rubrik>System</con_rubrik>
		<con_description>Listenobjekt für selbstexpandierende Auswahlisten in Formularen</con_description>
		<con_anlegen>1</con_anlegen>
		<con_bearbeiten>1</con_bearbeiten>
		<con_loeschen>1</con_loeschen>
	</meta>
	<script>&#60;?php 
class PhenotypeExpandingList extends PhenotypeContent_1001 {}
class PhenotypeContent_1001 extends PhenotypeContent
{
	&#47;&#47; Expandierende Liste
	var $content_type = 1001;
	var $skins = Array (); &#47;&#47; erlaubte Skins

	var $nostatus = 1;

	function setDefaultProperties()
	{
		$this-&#62;set(&#34;bez&#34;, &#34;Neue Liste&#34;);
		$this-&#62;set(&#34;liste&#34;, Array ());
	}

	function init($row, $block_nr = 0)
	{
		parent :: init($row, $block_nr);

		&#47;&#47; Hier das Formular und damit auch die Updatefunktion initialisieren

		$this-&#62;form_headline(&#34;Meta&#34;);
		
		$this-&#62;form_textfield(&#34;Bezeichnung&#34;, &#34;bez&#34;, 200);
		$this-&#62;form_textarea(&#34;Beschreibung&#60;br&#62;(intern)&#34;, &#34;comment&#34;, 300, 5);
		
		if (count($this-&#62;get(&#34;liste&#34;))!=0)
		{
			$this-&#62;form_headline(&#34;Listenelemente&#34;);
			$i = 0;
			foreach ($this-&#62;get(&#34;liste&#34;) AS $v)
			{
				$i ++;
				$this-&#62;set(&#34;item_&#34;.$i, 1);
				$this-&#62;form_checkbox(&#34;&#34;, &#34;item_&#34;.$i, $v);
			}
			$this-&#62;form_expandinglist(&#34;Vorschau&#34;,&#34;preview&#34;, $this-&#62;id);
		}
		$this-&#62;form_headline(&#34;Neue Elemente hinzufügen&#34;);
		$this-&#62;form_textfield(&#34;1. Element&#34;, &#34;element1&#34;, 200);
		$this-&#62;form_textfield(&#34;2. Element&#34;, &#34;element2&#34;, 200);
		$this-&#62;form_textfield(&#34;3. Element&#34;, &#34;element3&#34;, 200);

	}

	function update()
	{
		&#47;&#47; Die Updatemethode wird überschrieben, wenn beim Auswerten eines Formulars
		&#47;&#47; Properties verändert werden sollen. Beim externen Zugriff auf das Contentobjekt,
		&#47;&#47; d.h. ohne Formular, wird diese nicht aufgerufen.
		parent :: update();
		$_listeneu = Array ();
		foreach ($this-&#62;get(&#34;liste&#34;) AS $v)
		{
			$i ++;
			if ($this-&#62;get(&#34;item_&#34;.$i) == 1)
			{
				$_listeneu[] = $v;
			}
			$this-&#62;clear(&#34;item_&#34;.$i);
		}
		$this-&#62;set(&#34;liste&#34;, $_listeneu);

		for ($i = 1; $i &#60;= 3; $i ++)
		{
			if ($this-&#62;get(&#34;element&#34;.$i) != &#34;&#34;)
			{
				$this-&#62;addItem($this-&#62;get(&#34;element&#34;.$i));
			}
			$this-&#62;clear(&#34;element&#34;.$i);
		}
		$this-&#62;clear(&#34;preview&#34;);
	}

	function addItem($v)
	{
		$_liste = $this-&#62;get(&#34;liste&#34;);
		if (!in_array($v, $_liste))
		{
			$_liste[] = $v;
			asort($_liste);
			$this-&#62;set(&#34;liste&#34;, $_liste);
		}
	}

	function store()
	{
		&#47;&#47;2do Test für Nils

		for ($i = 1; $i &#60;= count($this-&#62;get(&#34;liste&#34;)); $i ++)
		{
			$this-&#62;clear(&#34;item_&#34;.$i);
		}
		$this-&#62;clear(&#34;element1&#34;);
		$this-&#62;clear(&#34;element2&#34;);
		$this-&#62;clear(&#34;element3&#34;);
		parent :: store();
	}

}
 ?&#62;</script>
	<templates>
   	</templates>
</phenotype>